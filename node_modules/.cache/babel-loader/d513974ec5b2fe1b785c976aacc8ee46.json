{"remainingRequest":"C:\\Users\\Lenovo\\Downloads\\Compressed\\travel-master\\travel-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Lenovo\\Downloads\\Compressed\\travel-master\\travel-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Lenovo\\Downloads\\Compressed\\travel-master\\travel-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Lenovo\\Downloads\\Compressed\\travel-master\\travel-master\\src\\pages\\city\\components\\cityList.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Lenovo\\Downloads\\Compressed\\travel-master\\travel-master\\src\\pages\\city\\components\\cityList.vue","mtime":1596367404000},{"path":"C:\\Users\\Lenovo\\Downloads\\Compressed\\travel-master\\travel-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1708077614823},{"path":"C:\\Users\\Lenovo\\Downloads\\Compressed\\travel-master\\travel-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1708077616092},{"path":"C:\\Users\\Lenovo\\Downloads\\Compressed\\travel-master\\travel-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1708077614823},{"path":"C:\\Users\\Lenovo\\Downloads\\Compressed\\travel-master\\travel-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1708077599485}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"C:\\\\Users\\\\Lenovo\\\\Downloads\\\\Compressed\\\\travel-master\\\\travel-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nexport default {\n  name: 'city-list',\n  props: {\n    // 历史访问城市\n    historyCity: Array,\n    // 热门城市列表\n    hotCities: Array,\n    // 所有城市列表\n    cityList: Object,\n    // 城市拼音首字母，用于快速定位\n    letter: String\n  },\n  activated: function activated() {\n    this.$refs.cityScroll.refresh();\n  },\n  data: function data() {\n    return {\n      // better-scroll配置\n      scrollOption: {\n        probeType: 3,\n        preventDefaultException: {\n          tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|LI)$/\n        }\n      },\n      // 滚动区域的y坐标\n      scrollY: 0,\n      // 每个字母标题的offsetTop\n      titlePositionArr: [],\n      // 当前列表显示的标题字母\n      currentTitle: '',\n      // sticky元素的top\n      stickyTop: 'top:0'\n    };\n  },\n  computed: _objectSpread({}, mapState(['currentCity']), {\n    // 页面是否已向上滚动的标识\n    isScrolled: function isScrolled() {\n      return this.scrollY < 0;\n    },\n    // 提取字母列表，不包括#\n    letterArr: function letterArr() {\n      var arr = [];\n\n      for (var key in this.cityList) {\n        arr.push(key);\n      }\n\n      return arr;\n    }\n  }),\n  watch: {\n    // 监听y坐标的变化，实时改变sticky元素的内容，实现类似粘性定位效果\n    scrollY: function scrollY(y) {\n      var _this = this;\n\n      // 先获取每一个字母标题的offsetTop，数组为空时才执行\n      if (this.titlePositionArr.length === 0) {\n        this.titlePositionArr.push({\n          letter: '#',\n          offsetTop: this.$refs['#'].offsetTop\n        });\n        this.letterArr.forEach(function (item) {\n          // 采用向头部插入新元素的方式，即得到一个逆序的字母表，因为这样更方便，代码相关row111,row123\n          _this.titlePositionArr.unshift({\n            letter: item,\n            offsetTop: _this.$refs[item][0].offsetTop\n          });\n        });\n      } // 用于实现标题切换时的特效，24(row111)为标题的高度\n\n\n      var temp = this.titlePositionArr.find(function (item) {\n        return y + item.offsetTop <= 24 && y + item.offsetTop > 0;\n      });\n\n      if (temp) {\n        // 如果有符合条件的结果，改变sticky元素的top值\n        var offsetTop = y + temp.offsetTop - 24;\n        this.stickyTop = \"top:\".concat(offsetTop, \"px;\");\n      } else {\n        // 没有则重置\n        this.stickyTop = 'top:0;';\n      } // 用于更改sticky元素的内容，即根据不同情况显示不同的字母\n\n      /**\n       * 随着页面向上滚动，y会逐渐变小，或者说y的绝对值-y会越来越大\n       * 而find的特性是返回第一个符合条件的元素\n       * 所以我们的条件应该是找到第一个符合offsetTop值小于-y的项\n       * 所以数组中每一项的offsetTop值应该按降序排列\n       * 因此row103采用逆序的方法\n       */\n\n\n      var currentTitle = this.titlePositionArr.find(function (item) {\n        return -y >= item.offsetTop;\n      });\n      if (currentTitle) this.currentTitle = currentTitle.letter;\n    },\n    // 监听字母的变化，滚动页面到指定位置\n    letter: function letter(val) {\n      this.$refs.cityScroll.scrollToElement(this.$refs[this.letter][0] || this.$refs[this.letter]);\n    }\n  },\n  methods: {\n    // 向上取整，保存y坐标\n    handleScroll: function handleScroll(_ref) {\n      var y = _ref.y;\n      this.scrollY = Math.ceil(y);\n    },\n    // 点击选择城市\n    chooseCity: function chooseCity(city) {\n      this.$emit('choose', city);\n    }\n  }\n};",{"version":3,"sources":["cityList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <better-scroll\n    class=\"city-scroll\"\n    ref=\"cityScroll\"\n    :options=\"scrollOption\"\n    @scroll=\"handleScroll\"\n  >\n    <div class=\"content\">\n      <div class=\"area\">\n        <div class=\"title active\" ref=\"#\">#</div>\n        <div class=\"sub-title\">当前定位</div>\n        <ul class=\"clearfix\">\n          <li>\n            <button @click=\"chooseCity(currentCity)\">\n              <i class=\"iconfont\">&#xe65e;</i>\n              {{ currentCity.name }}\n            </button>\n          </li>\n        </ul>\n        <div class=\"sub-title\">历史访问城市</div>\n        <ul class=\"clearfix\">\n          <li v-for=\"item in historyCity\" :key=\"item.id\">\n            <button @click=\"chooseCity(item)\">{{ item.name }}</button>\n          </li>\n        </ul>\n        <div class=\"sub-title\">热门城市</div>\n        <ul class=\"clearfix\">\n          <li v-for=\"item in hotCities\" :key=\"item.id\">\n            <button @click=\"chooseCity(item)\">{{ item.name }}</button>\n          </li>\n        </ul>\n      </div>\n      <!-- 按拼音首字母排列的城市列表 -->\n      <ul class=\"area\" v-for=\"(item, key) in cityList\" :key=\"key\">\n        <li class=\"title\" :ref=\"key\">{{ key }}</li>\n        <li v-for=\"entry in item\" :key=\"entry.id\" @click=\"chooseCity(entry)\">\n          {{ entry.name }}\n        </li>\n      </ul>\n    </div>\n    <div class=\"sticky\" v-show=\"isScrolled\" :style=\"stickyTop\">\n      {{ currentTitle }}\n    </div>\n  </better-scroll>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n  name: 'city-list',\n  props: {\n    // 历史访问城市\n    historyCity: Array,\n    // 热门城市列表\n    hotCities: Array,\n    // 所有城市列表\n    cityList: Object,\n    // 城市拼音首字母，用于快速定位\n    letter: String\n  },\n  activated() {\n    this.$refs.cityScroll.refresh()\n  },\n  data() {\n    return {\n      // better-scroll配置\n      scrollOption: {\n        probeType: 3,\n        preventDefaultException: {\n          tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|LI)$/\n        }\n      },\n      // 滚动区域的y坐标\n      scrollY: 0,\n      // 每个字母标题的offsetTop\n      titlePositionArr: [],\n      // 当前列表显示的标题字母\n      currentTitle: '',\n      // sticky元素的top\n      stickyTop: 'top:0'\n    }\n  },\n  computed: {\n    // 当前选择的城市\n    ...mapState(['currentCity']),\n    // 页面是否已向上滚动的标识\n    isScrolled() {\n      return this.scrollY < 0\n    },\n    // 提取字母列表，不包括#\n    letterArr() {\n      const arr = []\n      for (let key in this.cityList) {\n        arr.push(key)\n      }\n      return arr\n    }\n  },\n  watch: {\n    // 监听y坐标的变化，实时改变sticky元素的内容，实现类似粘性定位效果\n    scrollY(y) {\n      // 先获取每一个字母标题的offsetTop，数组为空时才执行\n      if (this.titlePositionArr.length === 0) {\n        this.titlePositionArr.push({\n          letter: '#',\n          offsetTop: this.$refs['#'].offsetTop\n        })\n        this.letterArr.forEach(item => {\n          // 采用向头部插入新元素的方式，即得到一个逆序的字母表，因为这样更方便，代码相关row111,row123\n          this.titlePositionArr.unshift({\n            letter: item,\n            offsetTop: this.$refs[item][0].offsetTop\n          })\n        })\n      }\n      // 用于实现标题切换时的特效，24(row111)为标题的高度\n      let temp = this.titlePositionArr.find(\n        item => y + item.offsetTop <= 24 && y + item.offsetTop > 0\n      )\n      if (temp) {\n        // 如果有符合条件的结果，改变sticky元素的top值\n        let offsetTop = y + temp.offsetTop - 24\n        this.stickyTop = `top:${offsetTop}px;`\n      } else {\n        // 没有则重置\n        this.stickyTop = 'top:0;'\n      }\n      // 用于更改sticky元素的内容，即根据不同情况显示不同的字母\n      /**\n       * 随着页面向上滚动，y会逐渐变小，或者说y的绝对值-y会越来越大\n       * 而find的特性是返回第一个符合条件的元素\n       * 所以我们的条件应该是找到第一个符合offsetTop值小于-y的项\n       * 所以数组中每一项的offsetTop值应该按降序排列\n       * 因此row103采用逆序的方法\n       */\n      let currentTitle = this.titlePositionArr.find(\n        item => -y >= item.offsetTop\n      )\n      if (currentTitle) this.currentTitle = currentTitle.letter\n    },\n    // 监听字母的变化，滚动页面到指定位置\n    letter(val) {\n      this.$refs.cityScroll.scrollToElement(\n        this.$refs[this.letter][0] || this.$refs[this.letter]\n      )\n    }\n  },\n  methods: {\n    // 向上取整，保存y坐标\n    handleScroll({ y }) {\n      this.scrollY = Math.ceil(y)\n    },\n    // 点击选择城市\n    chooseCity(city) {\n      this.$emit('choose', city)\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n@import '~styles/varibles.styl';\n\n.city-scroll {\n  position: absolute;\n  z-index: 1000;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin-top: 1.68rem;\n  background-color: #f8f8f8;\n\n  .content {\n    background-color: #fff;\n\n    .area {\n      .title {\n        padding-left: 0.4rem;\n        line-height: 0.48rem;\n        background-color: #eee;\n        font-size: 0.24rem;\n      }\n\n      .sub-title {\n        padding: 0 0.4rem;\n        line-height: 0.84rem;\n        color: #999;\n      }\n\n      >ul {\n        margin: 0 0.3rem;\n\n        >li {\n          float: left;\n          display: flex;\n          width: 33.33%;\n          padding: 0 0.1rem 0.2rem 0.1rem;\n          box-sizing: border-box;\n\n          >button {\n            flex: 1;\n            background-color: #fff;\n            line-height: 0.64rem;\n            text-align: center;\n            box-sizing: border-box;\n            border: 0.02rem solid #eee;\n            border-radius: 0.08rem;\n\n            &:active {\n              border-color: $themeColor;\n            }\n\n            .iconfont {\n              font-size: 0.28rem;\n              color: $themeColor;\n            }\n          }\n        }\n      }\n\n      >li {\n        padding: 0 0.4rem;\n        line-height: 0.84rem;\n\n        +li:active {\n          background-color: #f8f8f8;\n        }\n\n        &:nth-child(n+3)::before {\n          content: '';\n          display: block;\n          height: 0.01rem;\n          margin-bottom: -0.01rem;\n          background-color: #eee;\n        }\n      }\n    }\n  }\n\n  .sticky {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    padding-left: 0.4rem;\n    line-height: 0.48rem;\n    background-color: #eee;\n    font-size: 0.24rem;\n    color: $themeColor;\n  }\n}\n</style>\n"],"sourceRoot":"src/pages/city/components"}]}